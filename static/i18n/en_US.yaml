test:
  message: Hello

index:
  title: "Welcome to a tour of Go in Haskell"
  welcome:
    'Welcome to a tour of Go in Haskell.
    This site will show how to write the
    <a href="https://tour.golang.org/concurrency">concurrency</a> section of
    <a href="https://tour.golang.org">A Tour of Go</a> in Haskell.
    <em>A Tour of Go</em> is a famous tutorial of Go.
    Haskell has concurrency features similar to Go: <em>lightweight thread</em>, <em>channel</em>, etc..
    So it should be interesting to compare equivalent concurrent programs in Haskell and Go.'
  start: "Let's get started from <a href=\"concurrency/goroutines.html\">here</a>."
  haskell:
    '<em>For Haskell users</em> : In order to show the similarities with Go clearly,
    this site exclusively uses the async package and the stm package for concurrency.
    Concurrency is represented explicitly and used in IO.
    Eval monad and Par monad are not used.
    And, in order to make it easier for non-Haskell users,
    several famous utility functions and excessive point-free style are avoided.'
  toc: "Table of Contents"

goroutines:
  first: "Haskell has a lightweight thread feature similar to Go."
  inter: "starts a new lightweight thread"
  overviewPreAsync:
    '<code>async :: IO a -> IO (Async a)</code> is not special syntax, but a function.
    The function <code>async</code> is provided by the '
  overviewPostAsync:
    ' package'
  detailPreBase:
    'Haskell has several tools for communicating between threads.
    Basic tools are provided from the standard '
  detailPostBase:
    ' package.
    Like in Go, we can use a channel. (See the next page.)'
  note: ""

channels:
  first:
    'Channel is a one-directional tube to transport values.
    Values are appended to the end of the channel, and removed from the beginning of the channel.'
  writeChan: "Append v to the end of channel ch"
  readChan: "Take the first value from the top of channel ch"
  postRW: ""
  preNewChan: "Channel instances must be constructed before use."
  postNewChan:
    'Different threads can share a channel.
    If a thread tries to <code>readChan</code> from an empty channel,
    the thread does not raise an error, but blocks until a value is available.
    This is used to connect threads into a pipeline.'
  example:
    'The example code makes lightweight threads calculate the sum of <code>Int</code> lists.
    The main thread awaits results from the lightweight threads, then uses them.'
  stm:
    ' package provides another implementation of channel.
    STM will be introduced later.
    Now keep in mind only that you should use <code>atomically</code> to run stm computations.'

bufferedChannels:
  first: ' package introduces a size-bounded channel.'
  post:
    'Calling <code>writeChan</code> on a full channel blocks until space is available.
    This is used to create backpressure which limits
    the production rate of a channel upstream if the 
    consumption rate of the downstream channel is too low.'
  stm: ' package also have bounded channels, called <code>TBQueue</code>'

rangeAndClose:
  first:
    'Although Haskell channels do not <code>range</code> or <code>close</code> operations like Go,
    those can easily be implemented if needed.'
  range:
    'The <code>range</code> clause on a for statement in Go is useful to iterate channel values like a collection.
    Because <code>getChanContents :: Chan a -> IO [a]</code> converts channel to list,
    it works similar to <code>range</code>.'
  close:
    'A built-in function <code>close</code> of Go marks that no more values will be sent to a channel.
    <code>Maybe</code> can be used to imitate <code>close</code>.
    We send <code>Nothing</code> as the last value.
    Note that this is just a simple solution; it does not cause errors like Go if extra values are sent to a closed channel.'
  list:
    'By the way, the sample code on the right side can be implemented using Haskells list.
    Refer to the list version below.'

select:
  first:
    'Although Haskell does not have <code>select</code>, 
    the <code>stm</code> library offers a combinator with a similar effect.'
  preStm:
    '<code>select</code> in Go chooses one of a number of available communication operations. Similarly the '
  postStm:
    ' package provides a function <code>orElse :: STM a -> STM a -> STM a</code> which chooses a available one of two stm operations.
    <code>fold</code> functions in Haskell can then be used to apply this to a whole list of operations.
    Note that when multiple operations are available simultaneously, this implimentation chooses an available operation in order from the beginning.
    (Go <code>select</code> chooses randomly in that case.)
    And, all stm operations of the list must be of the same type.'
  preMsum:
    'Actually <code>STM</code> is a instance of <code>MonadPlus</code>.
    So we can implement <code>select</code> as shown below.'
  postMsum:
    'Because the <code>MonadPlus</code> instance is implemented using <code>orElse</code>,
    we can write <code>select</code> in this way.
    But it is not documented explicitly that the <code>MonadPlus</code> instance is implemented by <code>orElse</code>.
    Therefore you should avoid implementing <code>select</code> using <code>MonadPlus</code>.'

defaultSelection:
  first:
    'The <code>select</code> in Go can include a default case when there is no other available communication.
    A default case makes <code>select</code> non-blocking.'
  preCode:
    'In our Haskell-version <code>select</code>, we can simply add an operation to the end of our list which never blocks.'
  tickAfter:
    'The sample code on the right side also implements functions similar to <code>time.Tick</code> and <code>time.After</code> from Go.'

equivalentBinaryTrees1:
  first:
    'Different binary trees storing same elements can be of different shapes.
    Following two binary trees have same elements.'
  function:
    'Using concurrency techniques we have seen, make a function to check whether two binary trees store same elements.'
  tree:
    'Here is the abstract data type of binary trees.'
  next:
    'See the next page.'

equivalentBinaryTrees2:
  implementWalk: 'Implement <code>walk</code>.'
  testWalk: 'Test <code>walk</code>.'
  newTree:
    'A function <code>newTree :: Int -> IO Tree</code> randomly constructs a binary tree which has
    <code>k,2k,3k,..,10k</code> as elements, where <code>k::Int</code> is the argument.
    You can <code>walk</code> on a new binary tree as:'
  printTree: 'If you read and print values from the channel, <code>1,2,3,..,10</code> should be appeared.'
  implementSame: 'Implement <code>same</code> using <code>walk</code>.'
  testSame:
    "Test <code>same</code>.<br/>
    <code>t1<-newTree 1; t1'<-newTree 1; sae t1 t1'</code> should return <code>True</code>, and<br/>
    <code>t1<-newTree 1; t2<-newTree 2; same t1 t2</code> should return <code>False</code>."
  link:
    'Actual implementations of <code>Tree</code> and <code>newTree</code> is
    <a href="https://github.com/syocy/a-tour-of-go-in-haskell/blob/master/src/A_Tour_of_Go/Concurrency/Tree.hs">here</a>.
    An example solution is
    <a href="https://github.com/syocy/a-tour-of-go-in-haskell/blob/master/src/A_Tour_of_Go/Concurrency/EquivalentBinaryTrees.hs">here</a>.'
  pure:
    '(Off topic: A Tour of Go emphasizes that we can write this algorithm easiar than other languages because Go has channels.
    In Haskell, pure lists make it easier rather than channels.
    A sample code on the right side also shows a list implementation.)'

syncMutex:
  first:
    'Channel is a useful tool for communication between lightweight threads.
    But there are other kind of communications which are impossible (or hard) to be solved by channel.
    For example, a case that threads share a variable and modify it without conflicts.'
  mutex:
    'Go provides traditional Mutex for the problem.
    We can use <code>TVar</code> in the STM toolbox on Haskell.
    <code>TVar</code> solve the problem directly compared to Mutex.
    The usage is similar to <code>TQueue</code>.'
  sample:
    'The sample code on the right side composes a counter which is safely modified by multiple threads by using <code>TVar</code>.
    Because the <code>atomically</code> of STM makes a <strong>transaction</strong> (indivisible section),
    modifying counter do not cause conflicts.'

webCrawler:
  first: "In this exercise, we will implement a parallel web crawler by using concurrent features we've seen."
  crawl:
    'Implement <code>crawl</code>.
    Currently <code>crawl</code> is implemented by <code>crawlNaive</code>, which fetches web pages in serial (not parallel),
    and sometimes fetches same URL multiple times.
    Replace it to make <code>crawl</code> work correctly.'
  hint:
    '<em>Hint</em>: You may want to represent a cache of fetched URLs as <code>Set</code>,
    and share it between threads by using <code>TVar</code>.'
  link:
    'An example solution is
    <a href="https://github.com/syocy/a-tour-of-go-in-haskell/blob/master/src/A_Tour_of_Go/Concurrency/WebCrawler.hs">here</a>.'

furtherMore:
  first:
    'Using the async package and the stm package exclusively,
    this web site shows how to use lightweight threads explicitly in IO.
    Haskell has more tools for parallel and conccurent.'
  eval:
    ' package enables us to write parallel computations as pure functions with lazy evaluation.
    We can separate <strong>evaluation strategies</strong> -- how to parallelize -- from computations by the package.
    It is very useful and interesting.'
  par:
    ' package provides parallel computations by Par monad,
    that is independent of lazy evaluation, and enables us to explicitly specify granularity of parallelization and dependencies of data.
    It can be used as both pure function and IO.'
  book:
    'These many parallel/concurrent methods of Haskell are covered by a book
    <a href="http://chimera.labs.oreilly.com/books/1230000000929">Parallel and Concurrent Programming in Haskell</a>.
    In addition to them, the book deals with many parallel and concurrent topics in detail:
    basic topics like the difference between parallel and concurrent, and advanced topics like a kind of automatic parallelizations.
    If you are not a Haskell user but a programmer who sometimes treats parallelism and concurrency,
    it must be helpful for you.'
